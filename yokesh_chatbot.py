# -*- coding: utf-8 -*-
"""Yokesh_Chatbot.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bR3l3e_R479Cw7uICUmvLe150Y_QLBXO
"""

import streamlit as st
import openai

# ---- CONFIGURE YOUR OPENAI API KEY ----
openai.api_key = "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"

# ---- TOKEN COSTS (approx, as per OpenAI pricing 2025) ----
TOKEN_PRICES = {
    "gpt-4": {"input": 0.03 / 1000, "output": 0.06 / 1000},          # per 1K tokens
    "gpt-3.5-turbo": {"input": 0.0015 / 1000, "output": 0.002 / 1000} # per 1K tokens
}

# ---- APP CONFIG ----
st.set_page_config(page_title="Supply Chain Chatbot", layout="centered")
st.title("ü§ñ Supply Chain & Warehouse Automation Chatbot")

# ---- MODEL SELECTION ----
model_choice = st.sidebar.selectbox(
    "Select OpenAI Model",
    options=["gpt-4", "gpt-3.5-turbo"],
    index=0
)

# ---- INIT SESSION STATE ----
if "messages" not in st.session_state:
    st.session_state.messages = [
        {"role": "system", "content": "You are a helpful assistant specializing in supply chain analytics, warehouse automation, and AutoStore systems."}
    ]
if "total_cost" not in st.session_state:
    st.session_state.total_cost = 0.0

# ---- DISPLAY CHAT HISTORY ----
for msg in st.session_state.messages[1:]:
    if msg["role"] == "user":
        st.markdown(f"üßë‚Äçüíº **You:** {msg['content']}")
    else:
        st.markdown(f"ü§ñ **Bot:** {msg['content']}")

# ---- USER INPUT ----
user_input = st.text_input("Type your question about Supply Chain or Warehouse Automation:")

# ---- PROCESS USER QUERY ----
if user_input:
    st.session_state.messages.append({"role": "user", "content": user_input})

    with st.spinner("Thinking..."):
        response = openai.ChatCompletion.create(
            model=model_choice,
            messages=st.session_state.messages,
            max_tokens=300,
            temperature=0.5
        )

    bot_reply = response.choices[0].message["content"]

    # ---- Token Usage & Cost Calculation ----
    tokens_used = response.usage.total_tokens
    prompt_tokens = response.usage.prompt_tokens
    completion_tokens = response.usage.completion_tokens

    cost = (
        prompt_tokens * TOKEN_PRICES[model_choice]["input"] +
        completion_tokens * TOKEN_PRICES[model_choice]["output"]
    )
    st.session_state.total_cost += cost

    # ---- Save Bot Reply ----
    st.session_state.messages.append({"role": "assistant", "content": bot_reply})

    st.experimental_rerun()

# ---- RESET CHAT BUTTON ----
if st.button("üîÑ Reset Conversation"):
    st.session_state.messages = [
        {"role": "system", "content": "You are a helpful assistant specializing in supply chain analytics, warehouse automation, and AutoStore systems."}
    ]
    st.session_state.total_cost = 0.0
    st.experimental_rerun()

# ---- SHOW COST IN SIDEBAR ----
st.sidebar.markdown("### üí∞ Session Cost")
st.sidebar.write(f"Total Tokens Used: ~{sum([len(m['content']) for m in st.session_state.messages])}")
st.sidebar.write(f"Estimated Cost: **${st.session_state.total_cost:.4f}**")

